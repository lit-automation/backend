// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "SLR Automation": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/wimspaargaren/slr-automation/src/slr-api/design
// --out=$(GOPATH)/src/github.com/wimspaargaren/slr-automation/src/slr-api
// --version=v1.4.3

package app

import (
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
)

// Article mediatype (default view)
//
// Identifier: application/vnd.article+json; view=default
type Article struct {
	Abstract           *string    `form:"abstract,omitempty" json:"abstract,omitempty" yaml:"abstract,omitempty" xml:"abstract,omitempty"`
	Authors            *string    `form:"authors,omitempty" json:"authors,omitempty" yaml:"authors,omitempty" xml:"authors,omitempty"`
	CitedAmount        *int       `form:"cited_amount,omitempty" json:"cited_amount,omitempty" yaml:"cited_amount,omitempty" xml:"cited_amount,omitempty"`
	Comment            *string    `form:"comment,omitempty" json:"comment,omitempty" yaml:"comment,omitempty" xml:"comment,omitempty"`
	Doi                *string    `form:"doi,omitempty" json:"doi,omitempty" yaml:"doi,omitempty" xml:"doi,omitempty"`
	GotPdf             *bool      `form:"got_pdf,omitempty" json:"got_pdf,omitempty" yaml:"got_pdf,omitempty" xml:"got_pdf,omitempty"`
	ID                 uuid.UUID  `form:"id" json:"id" yaml:"id" xml:"id"`
	Journal            *string    `form:"journal,omitempty" json:"journal,omitempty" yaml:"journal,omitempty" xml:"journal,omitempty"`
	Language           *string    `form:"language,omitempty" json:"language,omitempty" yaml:"language,omitempty" xml:"language,omitempty"`
	Platform           *int       `form:"platform,omitempty" json:"platform,omitempty" yaml:"platform,omitempty" xml:"platform,omitempty"`
	ProjectID          *uuid.UUID `form:"project_id,omitempty" json:"project_id,omitempty" yaml:"project_id,omitempty" xml:"project_id,omitempty"`
	Publisher          *string    `form:"publisher,omitempty" json:"publisher,omitempty" yaml:"publisher,omitempty" xml:"publisher,omitempty"`
	Query              *string    `form:"query,omitempty" json:"query,omitempty" yaml:"query,omitempty" xml:"query,omitempty"`
	QueryPlatform      *string    `form:"query_platform,omitempty" json:"query_platform,omitempty" yaml:"query_platform,omitempty" xml:"query_platform,omitempty"`
	SearchResultNumber *int       `form:"search_result_number,omitempty" json:"search_result_number,omitempty" yaml:"search_result_number,omitempty" xml:"search_result_number,omitempty"`
	Status             *int       `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
	Title              *string    `form:"title,omitempty" json:"title,omitempty" yaml:"title,omitempty" xml:"title,omitempty"`
	Type               *string    `form:"type,omitempty" json:"type,omitempty" yaml:"type,omitempty" xml:"type,omitempty"`
	URL                *string    `form:"url,omitempty" json:"url,omitempty" yaml:"url,omitempty" xml:"url,omitempty"`
	Year               *int       `form:"year,omitempty" json:"year,omitempty" yaml:"year,omitempty" xml:"year,omitempty"`
}

// ArticleCollection is the media type for an array of Article (default view)
//
// Identifier: application/vnd.article+json; type=collection; view=default
type ArticleCollection []*Article

// Articlemetadata media type (default view)
//
// Identifier: application/vnd.articlemetadata+json; view=default
type Articlemetadata struct {
	// List of rq ids
	RqIds []int `form:"rq_ids" json:"rq_ids" yaml:"rq_ids" xml:"rq_ids"`
}

// Validate validates the Articlemetadata media type instance.
func (mt *Articlemetadata) Validate() (err error) {
	if mt.RqIds == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "rq_ids"))
	}
	return
}

// Article Screening mediatype (default view)
//
// Identifier: application/vnd.articlescreening+json; view=default
type Articlescreening struct {
	Abstract           *Textpredictmedia          `form:"abstract" json:"abstract" yaml:"abstract" xml:"abstract"`
	AbstractAndTitle   *Textpredictmedia          `form:"abstract_and_title" json:"abstract_and_title" yaml:"abstract_and_title" xml:"abstract_and_title"`
	ID                 uuid.UUID                  `form:"id" json:"id" yaml:"id" xml:"id"`
	MostImportantWords []*Mostimportantwordsmedia `form:"most_important_words" json:"most_important_words" yaml:"most_important_words" xml:"most_important_words"`
	Sentences          []*Textpredictmedia        `form:"sentences" json:"sentences" yaml:"sentences" xml:"sentences"`
	Title              *Textpredictmedia          `form:"title" json:"title" yaml:"title" xml:"title"`
}

// Validate validates the Articlescreening media type instance.
func (mt *Articlescreening) Validate() (err error) {

	if mt.Title == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if mt.Abstract == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "abstract"))
	}
	if mt.Sentences == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "sentences"))
	}
	if mt.AbstractAndTitle == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "abstract_and_title"))
	}
	if mt.MostImportantWords == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "most_important_words"))
	}
	if mt.Abstract != nil {
		if err2 := mt.Abstract.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.AbstractAndTitle != nil {
		if err2 := mt.AbstractAndTitle.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range mt.MostImportantWords {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range mt.Sentences {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if mt.Title != nil {
		if err2 := mt.Title.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Articlesmallmedia media type (default view)
//
// Identifier: application/vnd.articlesmallmedia+json; view=default
type Articlesmallmedia struct {
	CitedAmount int    `form:"cited_amount" json:"cited_amount" yaml:"cited_amount" xml:"cited_amount"`
	Doi         string `form:"doi" json:"doi" yaml:"doi" xml:"doi"`
	// graph id
	ID    int    `form:"id" json:"id" yaml:"id" xml:"id"`
	Title string `form:"title" json:"title" yaml:"title" xml:"title"`
	URL   string `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the Articlesmallmedia media type instance.
func (mt *Articlesmallmedia) Validate() (err error) {

	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}

	if mt.Doi == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "doi"))
	}
	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}
	return
}

// Media type used to indicate how many duplicates are removed (default view)
//
// Identifier: application/vnd.dupl+json; view=default
type Dupl struct {
	Duplicates int `form:"duplicates" json:"duplicates" yaml:"duplicates" xml:"duplicates"`
}

// Graphmedia media type (default view)
//
// Identifier: application/vnd.graphmedia+json; view=default
type Graphmedia struct {
	ArticleID   uuid.UUID            `form:"article_id" json:"article_id" yaml:"article_id" xml:"article_id"`
	Children    []*Articlesmallmedia `form:"children" json:"children" yaml:"children" xml:"children"`
	CitedAmount int                  `form:"cited_amount" json:"cited_amount" yaml:"cited_amount" xml:"cited_amount"`
	Doi         string               `form:"doi" json:"doi" yaml:"doi" xml:"doi"`
	// graph id
	ID    int    `form:"id" json:"id" yaml:"id" xml:"id"`
	Title string `form:"title" json:"title" yaml:"title" xml:"title"`
	URL   string `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the Graphmedia media type instance.
func (mt *Graphmedia) Validate() (err error) {

	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}

	if mt.Doi == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "doi"))
	}
	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}
	if mt.Children == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "children"))
	}
	for _, e := range mt.Children {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// GraphmediaCollection is the media type for an array of Graphmedia (default view)
//
// Identifier: application/vnd.graphmedia+json; type=collection; view=default
type GraphmediaCollection []*Graphmedia

// Validate validates the GraphmediaCollection media type instance.
func (mt GraphmediaCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Media type used to indicate if services are healthy (default view)
//
// Identifier: application/vnd.health+json; view=default
type Health struct {
	// True if API is healthy
	Health bool `form:"health" json:"health" yaml:"health" xml:"health"`
}

// Mostimportantwordsmedia media type (default view)
//
// Identifier: application/vnd.mostimportantwordsmedia+json; view=default
type Mostimportantwordsmedia struct {
	Frequency float64 `form:"frequency" json:"frequency" yaml:"frequency" xml:"frequency"`
	TfIdf     float64 `form:"tf_idf" json:"tf_idf" yaml:"tf_idf" xml:"tf_idf"`
	Word      string  `form:"word" json:"word" yaml:"word" xml:"word"`
}

// Validate validates the Mostimportantwordsmedia media type instance.
func (mt *Mostimportantwordsmedia) Validate() (err error) {
	if mt.Word == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "word"))
	}

	return
}

// Project mediatype (default view)
//
// Identifier: application/vnd.project+json; view=default
type Project struct {
	AmountOfArticles *int        `form:"amount_of_articles,omitempty" json:"amount_of_articles,omitempty" yaml:"amount_of_articles,omitempty" xml:"amount_of_articles,omitempty"`
	ID               uuid.UUID   `form:"id" json:"id" yaml:"id" xml:"id"`
	Name             string      `form:"name" json:"name" yaml:"name" xml:"name"`
	ScrapeState      interface{} `form:"scrape_state,omitempty" json:"scrape_state,omitempty" yaml:"scrape_state,omitempty" xml:"scrape_state,omitempty"`
	SearchString     *string     `form:"search_string,omitempty" json:"search_string,omitempty" yaml:"search_string,omitempty" xml:"search_string,omitempty"`
	Status           *int        `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
}

// Validate validates the Project media type instance.
func (mt *Project) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// ProjectCollection is the media type for an array of Project (default view)
//
// Identifier: application/vnd.project+json; type=collection; view=default
type ProjectCollection []*Project

// Validate validates the ProjectCollection media type instance.
func (mt ProjectCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Textpredictmedia media type (default view)
//
// Identifier: application/vnd.textpredictmedia+json; view=default
type Textpredictmedia struct {
	Class      string  `form:"class" json:"class" yaml:"class" xml:"class"`
	Confidence float64 `form:"confidence" json:"confidence" yaml:"confidence" xml:"confidence"`
	Text       string  `form:"text" json:"text" yaml:"text" xml:"text"`
}

// Validate validates the Textpredictmedia media type instance.
func (mt *Textpredictmedia) Validate() (err error) {
	if mt.Text == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "text"))
	}
	if mt.Class == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "class"))
	}

	return
}

// User mediatype (default view)
//
// Identifier: application/vnd.user+json; view=default
type User struct {
	// Email of the user
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// Family name of the user
	FamilyName string `form:"family_name" json:"family_name" yaml:"family_name" xml:"family_name"`
	// First name of the user
	FirstName string `form:"first_name" json:"first_name" yaml:"first_name" xml:"first_name"`
	// ID of the user in the DB
	ID uuid.UUID `form:"id" json:"id" yaml:"id" xml:"id"`
	// Middle name of the user
	MiddleName *string `form:"middle_name,omitempty" json:"middle_name,omitempty" yaml:"middle_name,omitempty" xml:"middle_name,omitempty"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {

	if mt.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "first_name"))
	}
	if mt.FamilyName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "family_name"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	return
}
