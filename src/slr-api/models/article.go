// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "SLR Automation": Models
//
// Command:
// $ goagen
// --design=github.com/wimspaargaren/slr-automation/src/slr-api/design
// --out=$(GOPATH)/src/github.com/wimspaargaren/slr-automation/src/slr-api
// --version=v1.4.3

package models

import (
	"context"
	"time"

	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/wimspaargaren/slr-automation/src/slr-api/app"
)

// Article represent an article found in a database
type Article struct {
	ID                 uuid.UUID `sql:"type:uuid;default:uuid_generate_v4()" gorm:"primary_key"` // primary key
	Abstract           string
	Authors            string
	BackwardSnowball   bool
	Bibtex             string
	CheckedByCrossref  bool
	CitedAmount        int
	CitedBy            []byte `sql:"type:jsonb"`
	Comment            string
	CreatedAt          time.Time
	DeletedAt          *time.Time
	Doi                string
	FullText           string
	GotPdf             bool
	Journal            string
	Keywords           []byte `sql:"type:jsonb"`
	Language           string
	Metadata           []byte    `sql:"type:jsonb"`
	Platform           Platform  `sql:"type:smallint"`                                 // enum Platform
	ProjectID          uuid.UUID `sql:"type:uuid" gorm:"index:idx_article_project_id"` // has many Article
	Publisher          string
	Query              string
	QueryPlatform      string
	SearchResultNumber int
	Status             ArticleStatus `sql:"type:smallint"` // enum ArticleStatus
	Title              string
	Type               string
	URL                string
	UpdatedAt          time.Time
	Year               int
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Article) TableName() string {
	return "articles"

}

// ArticleDB is the implementation of the storage interface for
// Article.
type ArticleDB struct {
	Db *gorm.DB
}

// NewArticleDB creates a new storage type.
func NewArticleDB(db *gorm.DB) *ArticleDB {
	return &ArticleDB{Db: db}
}

// DB returns the underlying database.
func (m *ArticleDB) DB() interface{} {
	return m.Db
}

// ArticleStorage represents the storage interface.
type ArticleStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Article, error)
	Get(ctx context.Context, id uuid.UUID) (*Article, error)
	Add(ctx context.Context, article *Article) error
	Update(ctx context.Context, article *Article) error
	Delete(ctx context.Context, id uuid.UUID) error

	ListArticle(ctx context.Context) []*app.Article
	OneArticle(ctx context.Context, id uuid.UUID) (*app.Article, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *ArticleDB) TableName() string {
	return "articles"

}
