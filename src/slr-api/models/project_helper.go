// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "SLR Automation": Model Helpers
//
// Command:
// $ goagen
// --design=github.com/wimspaargaren/slr-automation/src/slr-api/design
// --out=$(GOPATH)/src/github.com/wimspaargaren/slr-automation/src/slr-api
// --version=v1.4.1

package models

import (
	"context"
	"time"

	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/wimspaargaren/slr-automation/src/slr-api/app"
)

// MediaType Retrieval Functions

// ListProject returns an array of view: default.
func (m *ProjectDB) ListProject(ctx context.Context) []*app.Project {
	defer goa.MeasureSince([]string{"goa", "db", "project", "listproject"}, time.Now())

	var native []*Project
	var objs []*app.Project
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Project", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.ProjectToProject())
	}

	return objs
}

// ProjectToProject loads a Project and builds the default view of media type Project.
func (m *Project) ProjectToProject() *app.Project {
	project := &app.Project{}
	project.ID = m.ID
	project.Name = m.Name
	project.ScrapeState = m.ScrapeState
	project.SearchString = &m.SearchString
	tmp1 := int(m.Status)
	project.Status = &tmp1

	return project
}

// OneProject loads a Project and builds the default view of media type Project.
func (m *ProjectDB) OneProject(ctx context.Context, id uuid.UUID) (*app.Project, error) {
	defer goa.MeasureSince([]string{"goa", "db", "project", "oneproject"}, time.Now())

	var native Project
	err := m.Db.Scopes().Table(m.TableName()).Preload("Articles").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Project", "error", err.Error())
		return nil, err
	}

	view := *native.ProjectToProject()
	return &view, err
}

// CRUD Functions

// Get returns a single Project as a Database Model
// This is more for use internally, and probably not what you want in your controllers
func (m *ProjectDB) Get(ctx context.Context, id uuid.UUID) (*Project, error) {
	defer goa.MeasureSince([]string{"goa", "db", "project", "get"}, time.Now())

	var native Project
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Project
func (m *ProjectDB) List(ctx context.Context) ([]*Project, error) {
	defer goa.MeasureSince([]string{"goa", "db", "project", "list"}, time.Now())

	var objs []*Project
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *ProjectDB) Add(ctx context.Context, model *Project) error {
	defer goa.MeasureSince([]string{"goa", "db", "project", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Project", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *ProjectDB) Update(ctx context.Context, model *Project) error {
	defer goa.MeasureSince([]string{"goa", "db", "project", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Project", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *ProjectDB) Delete(ctx context.Context, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "project", "delete"}, time.Now())

	err := m.Db.Where("id = ?", id).Delete(&Project{}).Error
	if err != nil {
		goa.LogError(ctx, "error deleting Project", "error", err.Error())
		return err
	}

	return nil
}
